# Add to Functions:
FN_MW_TIMESTAMP: [timefmt($G$m$d$H$M$S, [if(%0, %0, [secs(utc)])])]
FN_MW_TIMETODATE: [setq(A,[strtrunc(%0,4)])][setq(B,[mid(%0,4,2)])][setq(C,[mid(%0,6,2)])][setq(D,[mid(%0,8,2)])][setq(E,[mid(%0,10,2)])][setq(F,[mid(%0,12,2)])][convsecs([convtime([r(A)]-[r(B)]-[r(C)] [r(D)]:[r(E)]:[r(F)],utc)])]
FN_SQLESCAPE: [edit(%0,','')]

Add to Cron List:
@trigger (db of fcco)/tr_cron_character
@trigger (db of fcco)/tr_cron_game

@create FateChargen Command Object <FCCO>
@set fcco=inherit
@set fcco=safe

&db_name fcco=alienc_aliencity
&tbl_pre fcco=wiki_
&errors_to fcco=#6
&colsize fcco=25
&va fcco= <db # of the jobs database>
@fo me=&last_character_update fcco=[mw_timestamp()]
@fo me=&last_game_update fcco=[mw_timestamp()]
@tel [create(Games Database,10)]=fcco
&vb fcco= <db of games database>

&sql_updated_characters fcco=select f.fractal_id, f.game_id, f.create_date, f.submit_date, f.approve_date, f.frozen_date, f.update_date, r.character_dbref from [u(TBL_PRE)]fate_fractal f, [u(TBL_PRE)]muxregister_register r where f.register_id = r.register_id and f.update_date > [u(last_character_update)];

&sql_game_skill_distrib fcco=select '%1', skill_distribution from [u(TBL_PRE)]fate_game where game_id=%0;

&sql_character_stats fcco=select '%0', f.*, a.is_major from [u(TBL_PRE)]fate_fractal_stat f left join [u(TBL_PRE)]fate_game_aspect a on (f.parent_id = a.game_aspect_id and f.stat_type = 1) where fractal_id = %1;

&sql_updated_games fcco=select g.game_id, g.game_name, g.game_description, g.game_status, r.character_dbref from [u(TBL_PRE)]fate_game g, [u(TBL_PRE)]muxregister_register r where g.register_id = r.register_id and g.modified_date > [u(last_game_update)];

&tr_cron_character fcco=@query/sql me/tr_updated_characters=[u(db_name)]/[u(sql_updated_characters)]

&tr_updated_characters fcco=
    @if [rserror()]=
    {
        @if [rsrows()]=
        {
            @trigger/quiet me/tr_update_single_character
        }
    },
    {
        @mail/quick [u(me/errors_to)]/Character Update Error=MySQL error occurred with character update process:%r%r[rserror()]
    }

&tr_update_single_character fcco=
    @if [setq(0,[extract([rsrec(|)],1,1,|)])]
        [setq(1,[extract([rsrec(|)],2,1,|)])]
        [setq(2,[extract([rsrec(|)],8,1,|)])]
        [not([hasattr([r(2)], _fate_stats)])]=
    {
        @set/quiet [r(2)]=_fate_stats:[setr(3,[create(Stats: [r(2)],10)])];
        @set/quiet [r(3)]=create_date:[mw_timetodate([extract([rsrec(|)],3,1,|)])];
        @set/quiet [r(3)]=game_id:[r(1)];
        @query/sql %#/tr_game_skill_distrib=[u(db_name)]/[u(sql_game_skill_distrib,[r(1)],[r(3)])]
    };
    @set/quiet [setr(3,[u([r(2)]/_fate_stats)])]=submit_date:[mw_timetodate([extract([rsrec(|)],4,1,|)])];
    @set/quiet [r(3)]=approve_date:[mw_timetodate([extract([rsrec(|)],5,1,|)])];
    @set/quiet [r(3)]=frozen_date:[mw_timetodate([extract([rsrec(|)],6,1,|)])];
    @if [gt([extract([rsrec(|)],7,1,|)],[u(last_character_update)])]=@set/quiet me=last_character_update:[extract([rsrec(|)],7,1,|)];
    @query/sql %#/tr_character_stats=[u(db_name)]/[u(sql_character_stats,[r(3)],[r(0)])];
    @if [rsnext()]={@trigger/quiet me/tr_update_single_character}

&tr_cron_game fcco=@query/sql me/tr_updated_games=[u(db_name)]/[u(sql_updated_games)]
    
&tr_updated_games fcco=
    @if [rserror()]=
    {
        @if [rsrows()]=
        {
            @trigger/quiet me/tr_update_single_game
        }
    },
    {
        @mail/quick [u(errors_to)]/Game Update Error=MySQL error occured with game update process:%r%r[rserror()]
    }

&tr_update_single_game fcco=
    @if [not([isdbref([setr,0[locate(%vb,Game [extract([rsrec(|)],1,1,|)],iT)])])])]=
    {
        @set/quiet [setr(0,[create(Game [extract([rsrec(|)],1,1,|)],10)])]=game_owner:[extract([rsrec(|)],5,1,|)];
        @tel %q0=%vb;
        @set/quiet %q0=game_name:[extract([rsrec(|)],2,1,|)];
        @set/quiet %q0=game_description:[extract([rsrec(|)],3,1,|)];
        @set/quiet %q0=game_status:[extract([rsrec(|)],4,1,|)];
    };
    @set/quiet %q0=game_name:[extract([rsrec(|)],2,1,|)];
    @set/quiet %q0=game_description:[extract([rsrec(|)],3,1,|)];
    @set/quiet %q0=game_status:[extract([rsrec(|)],4,1,|)];
    @if [rsnext()]={@trigger/quiet me/tr_update_single_game}
    
&tr_game_skill_distrib fcco=
    @if [rserror()]=
    {
        @if [rsrows()]=
        {
            @set/quiet [extract([rsrec(|)],1,1,|)]=distribution:[extract([rsrec(|)],2,1,|)]
        }
    },
    {
        @mail/quick [u(me/errors_to)]=Skill Distribution Error=MySQL error occurred attempting to set skill distribution:%r%r[rserror()]
    }

&tr_character_stats fcco=
    @if [rserror()]=
    {
        @if [rsrows()]=
        {
            @trigger/quiet me/tr_set_character_stat;
        }
    },
    {
        @mail/quick [u(me/errors_to)]/Character Update Error=MySQL error occurred with stat gathering process:%r%r[rserror()]
    }

&tr_set_character_stat fcco=
    @switch [setq(A,[extract([rsrec(|)],1,1,|)])]
            [setq(B,[extract([rsrec(|)],2,1,|)])]
            [setq(C,[extract([rsrec(|)],4,1,|)])]
            [setq(D,[extract([rsrec(|)],5,1,|)])]
            [setq(E,[extract([rsrec(|)],6,1,|)])]
            [setq(F,[extract([rsrec(|)],7,1,|)])]
            [setq(G,[extract([rsrec(|)],8,1,|)])]
            [setq(H,[extract([rsrec(|)],9,1,|)])]
            [setq(I,[extract([rsrec(|)],10,1,|)])]
            [setq(J,[extract([rsrec(|)],11,1,|)])]
            [setq(K,[extract([rsrec(|)],16,1,|)])]
            [setq(Z,[insert([r(Z)],-1,[r(B)],|)])]
            [r(C)]=
        1,
        {
            @@ Aspects;
            @set/quiet [r(A)]=aspect_[r(B)]:[r(D)]:[r(E)]:[r(K)];
        },
        2,
        {
            @@ Skills;
            @set/quiet [r(A)]=skill_[r(B)]:[r(J)]:[r(D)]:[r(G)];
        },
        3,
        {
            @@ Stunts;
            @set/quiet [r(A)]=stunt_[r(B)]:[r(E)]:[r(I)];
        },
        4,
        {
            @@ Stress;
            @set/quiet [r(A)]=stress_[r(B)]:[r(D)]:[r(H)]:[r(G)];
        },
        6,
        {
            @@ Consequence (add Condition Later);
            @set/quiet [r(A)]=consequence_[r(B)]:[r(F)]:[r(D)]:[r(E)];
        },
        7,
        {
            @@ Fate Points;
            @set/quiet [r(A)]=fate_[r(B)]:[r(G)];
        },
        8,
        {
            @@ Refresh;
            @set/quiet [r(A)]=refresh_[r(B)]:[r(G)];
        },
        9,
        {
            @@ Modes;
            @set/quiet [r(A)]=mode_[r(B)]:[r(E)]:[r(G)];
        };
    @if [rsnext()]={
        @trigger/quiet me/tr_set_character_stat
    },
    {
        @dolist [lattr([r(A)])]=
        {
            @if [and([isnum([extract(##,2,1,_)])],[not([match([r(Z)],[extract(##,2,1,_)],|)])])]=
            {
                @set/quiet [r(A)]=##:;
            }
        }
    }

&cmd_sheet fcco=$+sheet:@pemit %#=[u(display_fate_sheet,%#)]
&cmd_sheet2 fcco=$+sheet *:@pemit %#=[u(display_fate_sheet,%0)]

&display_fate_sheet fcco=
    [switch(
        [hasattr(%#,Guest)]
        [not([isdbref([num(*%0)])])]
        [not([hasattr([num(*%0)],_fate_stats)])]
        ,
        1*,
        [fatepref()] This command not available to guests.,
        01*,
        [fatepref()] %0 could not be found.,
        001,
        [fatepref()] [name([num(*%0)])] does not appear to have stats set.,
        [setq(0,[num(*%0)])]
        [setq(1,[u([r(0)]/_fate_stats)])]
        [header([name([r(0)])]'s Stats)]%r
        [u(display_summary,[r(1)])]%r
        [u(display_aspect,[r(1)])]%r
        [u(display_skill,[r(1)])]%r
        [u(display_stunt,[r(1)])]%r
        [u(display_consequence,[r(1)])]%r
        [u(display_stress,[r(1)])]%r
        [footer()]
    )]
   
&display_summary fcco=
    [rjust(Game:%b,[u(colsize)])][if([isdbref([setr(g,[locate(%vb,Game [u(%0/game_id)],iT)])])],[u(%qg/game_name)],UNKNOWN)]%r
    [rjust(Status:%b,[u(colsize)])][u(display_status,%0)]%r
    [rjust(Fate Refresh:%b,[u(colsize)])][u(%0/[lattr(%0/refresh_*)])]
    [rjust(Current Fate Points:%b,40)][u(%0/[lattr(%0/fate_*)])]
    
&display_status fcco=
    [switch(
        [hasattr(%0,frozen_date)]
        [hasattr(%0,approve_date)]
        [hasattr(%0,submit_date)],
        1*,
        Frozen on [u(%0/frozen_date)],
        01*,
        Approved on [u(%0/approve_date)],
        001,
        Submitted on [u(%0/submit_date)],
        Created on [u(%0/create_date)]
    )]
   
&display_stress fcco=
    [subheader(Stress Tracks)]%r
    [iter([sortby(sort_stresses,[iter([lattr(%0/stress_*)],[u(%0/##)], ,|)],|,|)],
        [rjust([extract(##,1,1,:)]:%b,[u(colsize)])][repeat(%xc%[%xnX%xc%]%xn%b,[extract(##,3,1,:)])]
        [repeat(%xc%[ %]%xn%b,[sub([extract(##,2,1,:)],[extract(##,3,1,:)])])],
        |,%r
    )]
    
&sort_stresses fcco=
    [comp(%0,%1)]
   
&display_consequence fcco=
    [subheader(Consequences)]%r
    [iter([sortby(sort_consequences,[iter([lattr(%0/consequence_*)],[u(%0/##)], ,|)],|,|)],
        [rjust(%(-[extract(##,1,1,:)]%) [extract(##,2,1,:)]:%b,[u(colsize)])][extract(##,3,1,:)],
        |,%r
    )]
    
&sort_consequences fcco=
    [if([eq([extract(%0,1,1,:)],[extract(%1,1,1,:)])],
        [if([regmatch([extract(%0,2,1,:)],^[extract(%1,2,1,:)]$)],
            [comp([extract(%0,3,1,:)],[extract(%1,3,1,:)])],
            [comp([extract(%0,2,1,:)],[extract(%1,2,1,:)])]
        )],
        [comp([extract(%0,1,1,:)],[extract(%1,1,1,:)])]
    )]
   
&display_stunt fcco=
    [subheader(Stunts)]%r
    [iter([sortby(sort_stunts,[iter([lattr(%0/stunt_*)],[u(%0/##)], ,|)],|,|)],
        %b%xh[eval([extract([escape(##)],1,1,:)])]%xn%r[space(6)][rightcol([extract([escape(##)],2,1,:)],6)],
        |,%r
    )]
    
&sort_stunts fcco=
    [comp(%0,%1)]
   
&display_aspect fcco=
    [subheader(Aspects)]%r
    [iter([sortby(sort_aspects,[iter([lattr(%0/aspect_*)],[u(%0/##)], ,|)],|,|)],
        [if([strlen([extract(##,1,1,:)])],[rjust([extract(##,1,1,:)]:%b,[u(colsize)])],[space([u(colsize)])])][extract(##,2,1,:)],
        |,%r
    )]
    
&sort_aspects fcco=
    [switch(
        [isnum([extract(%0,3,1,:)])][isnum([extract(%1,3,1,:)])],
        01,
        1,
        10,
        -1,
        [switch(
            [gt([strlen([extract(%0,1,1,:)])],0)][gt([strlen([extract(%1,1,1,:)])],0)],
            01,
            1,
            10,
            -1,
            11,
            [comp([extract(%0,1,1,:)],[extract(%1,1,1,:)])],
            [comp([extract(%0,2,1,:)],[extract(%1,2,1,:)])]
        )]
    )]

&display_skill fcco=
    [switch([u(%0/distribution)],
        3,[u(display_mode,%0)],
        4,[u(display_approach,%0)],
        [u(display_column,%0)]
    )]
 
&display_column fcco=
    [setq(r,0)]
    [setq(f,1)]
    [subheader(Skills)]%r
    [iter([sortby(sort_columns,[iter([lattr(%0/skill_*)],[u(%0/##)], ,|)],|,|)],
        [if([neq([extract(##,3,1,:)],%qr)],
            [if(%qf,
                [setq(f,0)],
                [rightcol([escape(%qs)],[u(colsize)],|,%,%b)]%r
            )]
            [setq(s,)]
            [setq(r,[extract(##,3,1,:)])]
            [rjust([fateladder(%qr,1)]:%b,[u(colsize)])]
        )]
        [setq(s,[if(%qs,[edit(%qs,$,|)])][extract(##,2,1,:)])],
        |,@@
    )]
    [if(%qs,[rightcol([escape(%qs)],[u(colsize)],|,%,%b)])]
    
&display_approach fcco=
    [subheader(Approaches)]%r
    [iter([sortby(sort_approaches,[iter([lattr(%0/skill_*)],[u(%0/##)], ,|)],|,|)],
        [rjust([extract(##,2,1,:)]:%b,[u(colsize)])][fateladder([extract(##,3,1,:)],1)],
        |,%r
    )]
    
&display_mode fcco=
    [subheader(Modes)]%r
    [iter([sortby(sort_modes,[iter([lattr(%0/mode_*)],[u(%0/##)]:[extract(##,2,1,_)], ,|)],|,|)],
        [rjust([fateladder([extract(##,2,1,:)],1)] [extract(##,1,1,:)]:%b,[u(colsize)])]
        [rightcol([escape([u(display_mode_skills,%0,[extract(##,3,1,:)])])],[u(colsize)],|,%,%b)],
        |,%r
    )]
    
&display_mode_skills fcco=
    [iter([sortby(sort_mode_skills,[iter([u(get_mode_skills,%0,%1)],[u(%0/##)], ,|)],|,|)],
        [extract(##,2,1,:)] +[extract(##,3,1,:)],
        |,|
    )]

&get_mode_skills fcco=
    [trim([iter([lattr(%0/skill_*)],[if([strmatch(%1,[extract([u(%0/##)],1,1,:)])],##)])])]
    
&sort_approaches fcco=
    [comp([extract(%0,2,1,:)],[extract(%1,2,1,:)])]
    
&sort_modes fcco=
    [setq(2,[extract(%0,2,1,:)])][setq(3,[extract(%1,2,1,:)])]
    [if(
        [gt([r(2)],[r(3)])],-1,
        [if(
            [gt([r(3)],[r(2)])],1,0
        )]
    )]
    
&sort_columns fcco=
    [setq(2,[extract(%0,3,1,:)])][setq(3,[extract(%1,3,1,:)])]
    [if(
        [gt(%q2,%q3)],-1,
        [if(
            [gt(%q3,%q2)],1,
            [comp([extract(%0,2,1,:)],[extract(%1,2,1,:)])]
        )]
    )]

&sort_mode_skills fcco=
    [setq(4,[extract(%0,3,1,:)])][setq(5,[extract(%1,3,1,:)])]
    [if(
        [gt([r(4)],[r(5)])],-1,
        [if(
            [gt([r(5)],[r(4)])],1,0
        )]
    )]
    
&cmd_dice fcco=$+dice*:
    @switch
        [if(
            [regmatchi(%0,^(%[a-z %]*)(%[-+0-9 %]*)(=%[a-z0-9 %]*)?$,-1 a b c)],
            [setq(e,0)]
            [setq(4,0)]
            [setq(5,)]
            [setq(6,0)]
            [if([trim(%qa)],
                [if([hasattr(%#,_fate_stats)],
                    [setq(2,0)]
                    [iter([lattr([setr(0,[u(%#/_fate_stats)])]/skill_*)],
                        [if([strmatch([setr(1,[u(%q0/##)])],*:[trim(%qa)]*)],
                            [setq(2,[add(%q2,1)])][setq(3,[extract(%q1,2,1,:)])][setq(4,[extract(%q1,3,1,:)])]
                        )],
                        %b,@@
                    )]
                    [switch([gt(%q2,1)][lt(%q2,1)],
                        1*, [setq(m,[fatepref()] Too many skills matched "[trim(%qa)]"%, please specify.)][setq(e,1)],
                        01, [setq(m,[fatepref()] No skill found that matched "[trim(%qa)]")][setq(e,1)]
                    )],
                    [setq(m,[fatepref()] You don't appear to have stats to roll against.)][setq(e,1)]
                )]
            )]
            [if([and([strlen([trim(%qb)])],[not(%qe)])],
                [setq(5,[edit([edit([strip(%qb,%b)],-,%b-)],+,%b+)])]
                [iter(%q5,
                    [if([isnum(##)],
                        [setq(6,[add(%q6,##)])],
                        [setq(e,1)]
                    )],
                    %b,@@
                )]
                [if(%qe,
                    [setq(m,[fatepref()] Error parsing modifiers: [trim(%qb)])]
                )]
            )]
            [if([and([strlen([trim(%qc)])],[not(%qe)])],
                [if([regmatchi([trim(%qc)],^= *job (%[0-9%]+)$,-1 j)],
                    [switch(
                        [not(u(%va/FN_GUEST,%#))]
                        [setq(K,u(%va/FN_FIND-JOB,%qj))][isdbref(%qk)]
                        [or(and(u(%va/IS_PUBLIC,%qk),match(get(%qk/OPENED_BY),%#)),u(%va/FN_MYACCESSCHECK,parent(%qk),%#,%qk),udefault(%qk/ADD_ACCESS,0,%#))]
                        [not(u(%va/FN_HASATTR,%qk,LOCKED))],
                            0*,[setq(m,[fatepref()] Guests cannot roll dice to a job.)][setq(e,1)],
                            10*,[setq(m,[fatepref()] Invalid job number.)][setq(e,1)],
                            110*,[setq(m,[fatepref()] [name(%qk)] is not yours. You can only modify your own jobs or jobs with public access.)][setq(e,1)],
                            1110*,[setq(m,[fatepref()] That job is locked and cannot be changed at this time.)][setq(e,1)]
                    )],
                    [setq(l,[rest([trim(%qc)],=)])]
                )]
            )],
            [setq(m,[fatepref()] Parsing error. Please check +help dice.)][setq(e,1)]
        )]
        [setq(t,self)]
        [if([not(%qe)],
            [setq(m,
                [subheader([fatepref()] [name(%#)] to%b 
                    [switch(
                        [isdbref(%qk)][gt([strlen(%ql)],0)],
                        1*,[name(%qk)][setq(t,job)],
                        01,Me[setq(t,list)],
                        Here[setq(t,here)]
                    )]
                )]%r
                %b%bRolled%b
                [if(%q3,%q3 %q4,Base Dice)][edit([edit(%q5,+,+%b)],-,-%b)]%r
                %b%b
                [setq(7,[add(%q4,%q6)])][iter([lrand(-1,1,4)],{[setq(7,[add(%q7,##)])]%[[switch(##,1,+,-1,-,%b)]%] })]
                %bfor a result of: [fateladder(%q7,1)]%r
                [divider()]
            )]
        )]
        [r(t)]=
            self,{@pemit %#=%qm},
            here,{@pemit/contents [loc(%#)]=%qm},
            list,{@pemit/list %# [iter(%ql, [num(*##)])]=%qm},
            job,{@pemit %#=%qm;@trigger %va/TRIG_ADD=%qk,%r%qm,%#,MYA;@trigger %va/TRIG_BROADCAST=%qk,%#,ADD}


@@ HELP FILE for +dice

+info/add +help/dice=Help on +Dice/%b%b+dice %[<skill name>%] %[<modifiers>%] %[=<targets>%]%r%r%b%bFor FATE games, rolls four Fate Dice (a special d6, with two blank sides, two sides marked with a +, and two sides marked with a -) and then adds up the results, giving you a possible range of -4 to +4. There are a number of optional arguments available as well, each of which can be used separate of the others:%r%r%b%b* <skill name>: If you are a character with statted skills, this will add%r[space(18)]the rank of the named skill to your final total.%r%r%b%b* <modifiers>:  A list of positive and negatives values (e.g. + 2 - 4) that%r[space(18)]will be added to your final total.%r%r%b%b* <targets>:%b%b%b%bThis is actually two options in one. The first is a space-%r[space(18)]separated list of user names; each of these people will be%r[space(18)]privately shown your roll and the results, rather than%r[space(18)]those results being shown to the whole room as is default. %r%r[space(18)]The second option is "=job <#>". In this case, the results%r[space(18)]of the roll will be added as a comment to the listed job,%r[space(18)]presuming you have permission to access the listed job.
 
    
@@ Set these up as permanent functions, through whatever method you usually use

&fn_rightcol fcco=
    [if([isint(%1)],
        [if([lt(%1,78)],
            [setq(0,[sub(78,%1)])]
            [setq(1,0)]
            [setq(2,[if(%2,%2,%b)])]
            [setq(3,[if(%3,%3,%b)])]
            [iter(%0,
                [if([gt([add([r(1)],[strlen(##)],[strlen([r(3)])])],[r(0)])],
                    %r[space(%1)][setq(1,[add([strlen(##)],[strlen([r(3)])])])],
                    [setq(1,[add([r(1)],[strlen(##)],[strlen([r(3)])])])]
                )]##,
                [r(2)],[r(3)]
            )],
            #-1 FUNCTION (RIGHTCOL) REQUIRES ARGUMENT 2 BE LESS INTEGER THAN 78
        )],
        #-1 FUNCTION (RIGHTCOL) REQUIRES INTEGER FOR ARGUMENT 2
    )]

&fn_fateladder fcco=[if(
    [isint(%0)],
        [switch(%0,
            7,Epic,
            6,Fantastic,
            5,Superb,
            4,Great,
            3,Good,
            2,Fair,
            1,Average,
            0,Mediocre,
            -1,Poor,
            [if(
                [gt(%0,7)],
                Fantastic,
                Terrible
            )]
        )]
        [if(%1,
            %b([if([gte(%0,0)],+)]%0)
        )],
        [fatepref()] Not a valid integer
    )]
   
    
&fn_fatepref fcco=
    %xn%xcFATE:%xn


